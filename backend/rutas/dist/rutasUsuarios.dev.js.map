{"version":3,"sources":["rutasUsuarios.js"],"names":["express","require","mostrarUsuarios","buscarUsuarioPorId","nuevoUsuario","borrarUsuario","router","Router","get","req","res","usuarios","json","console","error","status","mensaje","id","params","usuario","post","body","nuevoUsuarioData","resultado","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst { mostrarUsuarios, buscarUsuarioPorId, nuevoUsuario, borrarUsuario } = require('../bd/usuariosBD');  // AsegÃºrate de que las rutas sean correctas\r\n\r\nconst router = express.Router();\r\n\r\n// Ruta para mostrar todos los usuarios\r\nrouter.get('/mostrarUsuarios', async (req, res) => {\r\n    try {\r\n        const usuarios = await mostrarUsuarios();\r\n        res.json(usuarios);\r\n    } catch (error) {\r\n        console.error(\"Error al mostrar usuarios: \", error);\r\n        res.status(500).json({ mensaje: 'Error al mostrar usuarios' });\r\n    }\r\n});\r\n\r\n// Ruta para buscar un usuario por ID\r\nrouter.get('/buscarPorId/:id', async (req, res) => {\r\n    try {\r\n        const id = req.params.id;\r\n        const usuario = await buscarUsuarioPorId(id);\r\n        if (!usuario) {\r\n            return res.status(404).json({ mensaje: 'Usuario no encontrado' });\r\n        }\r\n        res.json(usuario);\r\n    } catch (error) {\r\n        console.error(\"Error al buscar usuario: \", error);\r\n        res.status(500).json({ mensaje: 'Error al buscar usuario' });\r\n    }\r\n});\r\n\r\n// Ruta para agregar un nuevo usuario\r\nrouter.post('/nuevoUsuario', async (req, res) => {\r\n    try {\r\n        const usuario = req.body;\r\n        const nuevoUsuarioData = await nuevoUsuario(usuario);\r\n        res.json(nuevoUsuarioData);\r\n    } catch (error) {\r\n        console.error(\"Error al agregar usuario: \", error);\r\n        res.status(500).json({ mensaje: 'Error al agregar usuario' });\r\n    }\r\n});\r\n\r\n// Ruta para borrar un usuario por ID\r\nrouter.delete('/borrarUsuario/:id', async (req, res) => {\r\n    try {\r\n        const id = req.params.id;\r\n        const resultado = await borrarUsuario(id);\r\n        res.json(resultado);\r\n    } catch (error) {\r\n        console.error(\"Error al borrar usuario: \", error);\r\n        res.status(500).json({ mensaje: 'Error al borrar usuario' });\r\n    }\r\n});\r\n\r\nmodule.exports = router;"],"file":"rutasUsuarios.dev.js"}