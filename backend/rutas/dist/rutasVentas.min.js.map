{"version":3,"sources":["rutasVentas.js"],"names":["require","Router","ventas","ruta","get","req","res","snapshot","listaVentas","regeneratorRuntime","async","_context","prev","next","awrap","sent","abrupt","json","error","forEach","push","_objectSpread","id","doc","data","t0","status","stop","_context2","params","exists","_req$body","IdUsuario","IdProducto","Cantidad","FechaYHora","nuevaVenta","docRef","_context3","body","Status","add","mensaje","put","_context4","update"],"mappings":"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","file":"rutasVentas.min.js","sourcesContent":["const { Router } = require('express');\r\nconst { ventas } = require('../bd/conexion'); // Asegúrate de que está bien la conexión\r\nconst ruta = Router();\r\n\r\n// Ruta para mostrar todas las ventas\r\nruta.get('/mostrarVentas', async (req, res) => {\r\n    try {\r\n        const snapshot = await ventas.get();\r\n        if (snapshot.empty) {\r\n            return res.status(404).json({ error: 'No se encontraron ventas' });\r\n        }\r\n        const listaVentas = [];\r\n        snapshot.forEach(doc => {\r\n            listaVentas.push({ id: doc.id, ...doc.data() });\r\n        });\r\n        res.json(listaVentas);\r\n    } catch (error) {\r\n        res.status(500).json({ error: 'Error al obtener ventas' });\r\n    }\r\n});\r\n\r\n// Ruta para buscar venta por ID\r\nruta.get('/:id', async (req, res) => {\r\n    const id = req.params.id;\r\n    try {\r\n        const doc = await ventas.doc(id).get();\r\n        if (!doc.exists) {\r\n            return res.status(404).json({ error: 'Venta no encontrada' });\r\n        }\r\n        res.json({ id: doc.id, ...doc.data() });\r\n    } catch (error) {\r\n        res.status(500).json({ error: 'Error al obtener la venta' });\r\n    }\r\n});\r\n\r\n// Ruta para agregar una nueva venta\r\nruta.post('/agregarVenta', async (req, res) => {\r\n    const { IdUsuario, IdProducto, Cantidad, FechaYHora } = req.body;\r\n    try {\r\n        if (!IdUsuario || !IdProducto || !Cantidad || !FechaYHora) {\r\n            return res.status(400).json({ error: 'Faltan campos obligatorios' });\r\n        }\r\n        const nuevaVenta = {\r\n            IdUsuario,\r\n            IdProducto,\r\n            Cantidad,\r\n            FechaYHora,\r\n            Status: 'vendido',  // El estado inicial es \"vendido\"\r\n        };\r\n        const docRef = await ventas.add(nuevaVenta);\r\n        res.json({ mensaje: 'Venta agregada', id: docRef.id });\r\n    } catch (error) {\r\n        res.status(500).json({ error: 'Error al agregar la venta' });\r\n    }\r\n});\r\n\r\n// Ruta para cancelar (actualizar) una venta por ID\r\nruta.put('/cancelarVenta/:id', async (req, res) => {\r\n    const id = req.params.id;\r\n    try {\r\n        const doc = await ventas.doc(id).get();\r\n        if (!doc.exists) {\r\n            return res.status(404).json({ error: 'Venta no encontrada para cancelar' });\r\n        }\r\n        await ventas.doc(id).update({ Status: 'cancelado' });  // Cambia el estatus a \"cancelado\"\r\n        res.json({ mensaje: 'Venta cancelada con éxito' });\r\n    } catch (error) {\r\n        res.status(500).json({ error: 'Error al cancelar la venta' });\r\n    }\r\n});\r\n\r\nmodule.exports = ruta;"]}