{"version":3,"sources":["rutasUsuarios.js"],"names":["express","require","mostrarUsuarios","buscarUsuarioPorId","nuevoUsuario","borrarUsuario","router","Router","usuarios","regeneratorRuntime","async","_context","prev","next","awrap","sent","res","json","t0","status","mensaje","stop","get","req","id","usuario","_context2","params","abrupt","console","error","nuevoUsuarioData","_context3","body","resultado","_context4","module","exports"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,oBACqDA,QAAQ,oBAA7EC,yBAAAA,gBAAiBC,4BAAAA,mBAAoBC,sBAAAA,aAAcC,uBAAAA,cAErDC,OAASN,QAAQO,SAGvBD,OALyBH,IAAAA,mBAKM,SALNA,EAAAA,GAKM,IAAAK,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAL4BT,mBAK5B,KAAA,EAL4BA,EAK5BM,EAAAI,KAGvBC,EAAIC,KAAKT,GAHcG,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,MAAA,GAHzBL,QAASN,MAAQO,8BAAjBD,EAAAA,IASEU,EAAIG,OAAO,KAAKF,KAAK,CAAEG,QAAS,8BANT,KAAA,GAAA,IAAA,MAAA,OAAAT,EAAAU,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAAf,OAAAgB,IAAA,mBAAA,SAAAC,EAAAP,GAAA,IAAAQ,EAAAC,EAAA,OAAAhB,mBAAAC,MAAA,SAAAgB,GAAA,OAAA,OAAAA,EAAAd,KAAAc,EAAAb,MAAA,KAAA,EAAA,OAAAa,EAAAd,KAAA,EAAAY,EAAAD,EAAAI,OAAAH,GAAAE,EAAAb,KAAA,EAAAJ,mBAAAK,MAAAX,mBAAAqB,IAAA,KAAA,EAAA,GAAAC,EAAAC,EAAAX,KAAA,CAAAW,EAAAb,KAAA,EAAA,MAAA,OAAAa,EAAAE,OAAA,SAgBZZ,EAAIG,OAAO,KAAKF,KAAK,CAAEG,QAAS,2BAhBpB,KAAA,EAEjBZ,EAAAA,KAAAA,GAFiBkB,EAAAb,KAAA,GAAA,MAAA,KAAA,GAAAa,EAAAd,KAAA,GAAAc,EAAAR,GAAAQ,EAAA,MAAA,GAAAG,QAAAC,MAAA,4BAAAJ,EAAAR,IAAAF,EAAAG,OAAA,KAAAF,KAAA,CAAAG,QAAA,4BAAA,KAAA,GAAA,IAAA,MAAA,OAAAM,EAAAL,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,QAKvBQ,OAAAA,KAAAA,gBAAc,SAAAN,EAAAP,GAAA,IAAAS,EAAAM,EAAA,OAAAtB,mBAAAC,MAAA,SAAAsB,GAAA,OAAA,OAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,KAAA,EAAA,OAAAmB,EAAApB,KAAA,EACSQ,EAASG,EAAAU,KADlBD,EAAAnB,KAAA,EAAAJ,mBAAAK,MACdV,aAAAqB,IADc,KAAA,EACdM,EADcC,EAAAjB,KAyBdC,EAAIC,KAAKc,GAzBKC,EAAAnB,KAAA,GAAA,MAAA,KAAA,EAAAmB,EAAApB,KAAA,EAAAoB,EAAAd,GAAAc,EAAA,MAAA,GALSH,QAAAC,MAAA,6BAAAE,EAAAd,IAAAF,EAAAG,OAAA,KAAAF,KAAA,CAAAG,QAAA,6BAKT,KAAA,GAAA,IAAA,MAAA,OAAAY,EAAAX,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAiCtBf,OAAM,OAAQ,qBAAsB,SAAOiB,EAAKP,GAAZ,IAAAQ,EAAAU,EAAA,OAAAzB,mBAAAC,MAAA,SAAAyB,GAAA,OAAA,OAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,KAAA,EAAA,OAAAsB,EAAAvB,KAAA,EA3BLY,EAAAD,EAAAI,OAAAH,GA2BKW,EAAAtB,KAAA,EAAAJ,mBAAAK,MA3BLT,cAAAmB,IA2BK,KAAA,EA3BLU,EA2BKC,EAAApB,KA3BLC,EAAAC,KAAAiB,GA2BKC,EAAAtB,KAAA,GAAA,MAAA,KAAA,EAAAsB,EAAAvB,KAAA,EAAAuB,EAAAjB,GAAAiB,EAAA,MAAA,GA3BLN,QAAAC,MAAA,4BAAAK,EAAAjB,IAAAF,EAAAG,OAAA,KAAAF,KAAA,CAAAG,QAAA,4BA2BK,KAAA,GAAA,IAAA,MAAA,OAAAe,EAAAd,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAWpCe,OAAOC,QAAU/B","file":"rutasUsuarios.min.js","sourcesContent":["const express = require('express');\r\nconst { mostrarUsuarios, buscarUsuarioPorId, nuevoUsuario, borrarUsuario } = require('../bd/usuariosBD');  // AsegÃºrate de que las rutas sean correctas\r\n\r\nconst router = express.Router();\r\n\r\n// Ruta para mostrar todos los usuarios\r\nrouter.get('/mostrarUsuarios', async (req, res) => {\r\n    try {\r\n        const usuarios = await mostrarUsuarios();\r\n        res.json(usuarios);\r\n    } catch (error) {\r\n        console.error(\"Error al mostrar usuarios: \", error);\r\n        res.status(500).json({ mensaje: 'Error al mostrar usuarios' });\r\n    }\r\n});\r\n\r\n// Ruta para buscar un usuario por ID\r\nrouter.get('/buscarPorId/:id', async (req, res) => {\r\n    try {\r\n        const id = req.params.id;\r\n        const usuario = await buscarUsuarioPorId(id);\r\n        if (!usuario) {\r\n            return res.status(404).json({ mensaje: 'Usuario no encontrado' });\r\n        }\r\n        res.json(usuario);\r\n    } catch (error) {\r\n        console.error(\"Error al buscar usuario: \", error);\r\n        res.status(500).json({ mensaje: 'Error al buscar usuario' });\r\n    }\r\n});\r\n\r\n// Ruta para agregar un nuevo usuario\r\nrouter.post('/nuevoUsuario', async (req, res) => {\r\n    try {\r\n        const usuario = req.body;\r\n        const nuevoUsuarioData = await nuevoUsuario(usuario);\r\n        res.json(nuevoUsuarioData);\r\n    } catch (error) {\r\n        console.error(\"Error al agregar usuario: \", error);\r\n        res.status(500).json({ mensaje: 'Error al agregar usuario' });\r\n    }\r\n});\r\n\r\n// Ruta para borrar un usuario por ID\r\nrouter.delete('/borrarUsuario/:id', async (req, res) => {\r\n    try {\r\n        const id = req.params.id;\r\n        const resultado = await borrarUsuario(id);\r\n        res.json(resultado);\r\n    } catch (error) {\r\n        console.error(\"Error al borrar usuario: \", error);\r\n        res.status(500).json({ mensaje: 'Error al borrar usuario' });\r\n    }\r\n});\r\n\r\nmodule.exports = router;"]}